branches:
  only:
  - develop
  - master
skip_tags: true
skip_commits:
  files:
    - docs/*
    - '**/*.html'
image: Visual Studio 2017
configuration: Release
platform: Any CPU
services:
- mongodb
- postgresql
nuget:
  project_feed: true
  disable_publish_on_pr: true
install:
  # Appveyor images now have cosmosdb installed (https://help.appveyor.com/discussions/problems/7950-unable-to-laucnh-cosmosdb-emulator), but
  # because it's an old version, we have to uninstall it, and install the latest
  - ps: |
      Import-Module "$env:ProgramFiles\Azure Cosmos DB Emulator\PSModules\Microsoft.Azure.CosmosDB.Emulator"
      Uninstall-CosmosDbEmulator -RemoveData
  # this nice little snippit is from here: https://medium.com/@nick.chapsas/testing-your-cosmosdb-c-code-and-automating-it-with-appveyor-7df2da50a4b4
  - ps: "Start-Sleep -s 30"
  - ps: "Invoke-WebRequest -Uri 'https://aka.ms/cosmosdb-emulator' -OutFile 'cosmos-db.msi'\ncmd /c start /wait msiexec /i cosmos-db.msi /qn /quiet /norestart /log install.log  \nSet-Content -Value '\"C:\\Program Files\\Azure Cosmos DB Emulator\\CosmosDB.Emulator.exe\" /NoUI /NoExplorer /NoFirewall' -Path .\\startCosmosDb.cmd\nStart-Process -FilePath .\\startCosmosDb.cmd\n\n$attempt = 0\n$max = 8\nwhile(!$client.Connected -and $attempt -lt $max) {\n  try {    \n    $client = New-Object System.Net.Sockets.TcpClient([System.Net.Sockets.AddressFamily]::InterNetwork)\n    $attempt++; $client.Connect(\"127.0.0.1\", 8081); write-host \"CosmosDB started\"\n  }\n  catch {    \n    if($attempt -eq $max) {\n      write-host \"CosmosDB was not started\"; $client.Close(); return\n      }  \n    [int]$sleepTime = 5*$attempt\n    write-host \"CosmosDB is not started. Retry after $sleepTime seconds...\"\n    sleep $sleepTime;\n    $client.Close()        \n  }  \n}"
build_script:
- cmd: >-
    @echo off

    cls

    SET PGUSER=postgres

    SET PGPASSWORD=Password12!

    PATH=C:\Program Files\PostgreSQL\9.6\bin\;%PATH%

    createdb MartenTest

    If Not Exist src\.nuget\nuget.exe msbuild src\.nuget\NuGet.targets -Target:RestorePackages

    If Not Exist src\packages\gitlink\lib\net45\GitLink.exe src\.nuget\nuget.exe Install gitlink -Source "https://www.nuget.org/api/v2/" -OutputDirectory "src\packages" -ExcludeVersion

    If Not Exist src\packages\FAKE\tools\fake.exe src\.nuget\nuget.exe Install FAKE -OutputDirectory "src\packages" -ExcludeVersion

    src\packages\FAKE\tools\fake.exe build.fsx %*
test:
  assemblies:
  - src/MassTransit.Tests/bin/Release/net452/MassTransit.Tests.dll
  - src/Containers/MassTransit.Containers.Tests/bin/Release/net452/MassTransit.Containers.Tests.dll
  - src/MassTransit.AutomatonymousIntegration.Tests/bin/Release/net461/MassTransit.AutomatonymousIntegration.Tests.dll
  - src/Persistence/MassTransit.MongoDbIntegration.Tests/bin/Release/net452/MassTransit.MongoDbIntegration.Tests.dll
  - src/Persistence/MassTransit.MartenIntegration.Tests/bin/Release/net452/MassTransit.MartenIntegration.Tests.dll
  - src/Persistence/MassTransit.NHibernateIntegration.Tests/bin/Release/net461/MassTransit.NHibernateIntegration.Tests.dll
  - src/Persistence/MassTransit.DocumentDbIntegration.Tests/bin/Release/net452/MassTransit.DocumentDbIntegration.Tests.dll
  - src/MassTransit.HttpTransport.Tests/bin/Release/net452/MassTransit.HttpTransport.Tests.dll
  categories:
    except:
    - Flakey
artifacts:
- path: build_artifacts/*.nupkg
  name: Packages
deploy:
- provider: NuGet
  name: Prerelease
  api_key:
    secure: 0B2TmwiOnNW+CavGbvgr6S8WcuB2A/5enkf/ZrlRW+8Q8AwW5P9T7+B3QDAtYiEi
  on:
    branch: develop
- provider: NuGet
  name: Release
  api_key:
    secure: 0B2TmwiOnNW+CavGbvgr6S8WcuB2A/5enkf/ZrlRW+8Q8AwW5P9T7+B3QDAtYiEi
  on:
    branch: master
notifications:
- provider: Webhook
  url: https://webhooks.gitter.im/e/27919bcbf1f770b0befd
  on_build_success: true
  on_build_failure: true
  on_build_status_changed: true